# Comprehensive CI/CD Pipeline for TYPO3Fluid-Storybook-JS-Integration
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

permissions:
  contents: read
  pages: write
  id-token: write
  packages: write

env:
  NODE_VERSION: '22.x'
  CACHE_VERSION: v1

jobs:
  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Get version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

  # Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-gates

    strategy:
      matrix:
        node-version: ['18.x', '20.x', '22.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Upload coverage to Codecov
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality-gates, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Test build output
        run: |
          test -f dist/main.es.js
          test -f dist/main.umd.js

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Build Storybook
  build-storybook:
    name: Build Storybook
    runs-on: ubuntu-latest
    needs: [quality-gates, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run storybook:build

      - name: Upload Storybook artifacts
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: storybook-static/
          retention-days: 7

  # Deploy Storybook to GitHub Pages
  deploy-storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    needs: [build-storybook]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download Storybook artifacts
        uses: actions/download-artifact@v4
        with:
          name: storybook-static
          path: storybook-static/

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: storybook-static/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Publish Package
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [quality-gates, test, build]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release Assets
        run: |
          tar -czf typo3fluid2storybook-addon-${{ needs.quality-gates.outputs.version }}.tar.gz dist/

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            typo3fluid2storybook-addon-${{ needs.quality-gates.outputs.version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gates

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Analysis
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Analyze bundle size
        run: |
          npm run bundle-analyzer -- --json > bundle-analysis.json

      - name: Comment bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const analysis = JSON.parse(fs.readFileSync('bundle-analysis.json', 'utf8'));
            const mainSize = Math.round(analysis.main?.size || 0);

            const comment = `## üì¶ Bundle Size Analysis

            | File | Size |
            |------|------|
            | main.es.js | ${mainSize} bytes |
            | main.umd.js | ${Math.round(analysis.umd?.size || 0)} bytes |

            *Bundle analysis generated for commit ${context.sha.slice(0, 7)}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Notification
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality-gates, test, build, build-storybook]
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.quality-gates.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' }}
        run: echo "‚úÖ All checks passed!"

      - name: Notify failure
        if: ${{ needs.quality-gates.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "‚ùå Some checks failed!"
          exit 1
